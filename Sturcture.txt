dex-v3/
│
├── contracts/      # All on‑chain code
│   ├── core/      # “Kernel” pools & factory
│   │   ├── Factory.sol
│   │   ├── Pool.sol
│   │   ├── PoolDeployer.sol
│   │   └── interfaces/
│   │       ├── IPool.sol
│   │       ├── IFactory.sol
│   │       └── callback/
│   │           └── IUniswapV3SwapCallback.sol
│   │
│   ├── libraries/               # Pure/‑view math & helpers
│   │   ├── TickMath.sol
│   │   ├── FullMath.sol
│   │   ├── FixedPoint128.sol
│   │   ├── LiquidityMath.sol
│   │   ├── FeeMath.sol
│   │   ├── OracleMath.sol
│   │   ├── BitMath.sol
│   │   └── SafeCast.sol
│   │
│   ├── periphery/               # UX helpers, routers, position NFTs
│   │   ├── SwapRouter.sol
│   │   ├── NonfungiblePositionManager.sol
│   │   ├── Quoter.sol
│   │   ├── Multicall.sol
│   │   └── interfaces/
│   │       └── ISwapRouter.sol
│   │
│   ├── governance/              # Protocol controls & fee capture
│   │   ├── ProtocolFees.sol
│   │   ├── EmergencyPause.sol
│   │   └── TimelockController.sol
│   │
│   ├── mocks/                   # Lightweight stubs for testing
│   │   ├── ERC20Mock.sol
│   │   ├── WETH9Mock.sol
│   │   └── CallbackTargetMock.sol
│   │
│   └── upgradeability/          # Optional proxies (if chosen)
│       ├── TransparentProxy.sol
│       └── ProxyAdmin.sol
│
├── script/                       # Foundry / Hardhat runtime scripts
│   ├── Deploy.s.sol              # forge script to deploy factory & router
│   ├── CreatePool.s.sol          # quick pool factory helper
│   └── SimulateSwap.s.sol        # repeatable swap scenarios
│
├── test/                         # Unit & invariant tests
│   ├── libraries/
│   │   ├── TickMath.t.sol
│   │   └── FullMath.t.sol
│   ├── core/
│   │   ├── Pool.t.sol
│   │   └── Factory.t.sol
│   ├── periphery/
│   │   ├── SwapRouter.t.sol
│   │   └── PositionManager.t.sol
│   └── fuzz/
│       └── Invariants.t.sol
│
├── .forge‑snapshot/              # (auto‑generated) Foundry state diffs
│
├── deployments/                  # JSON artifacts per network (if using Hardhat‑deploy)
│   ├── mainnet/
│   └── sepolia/
│
├── abi/                          # Cleaned ABIs for front‑end consumption
│   ├── Pool.json
│   └── SwapRouter.json
│
├── scripts/                      # Node/TypeScript helpers (non‑on‑chain)
│   ├── generateAbi.ts
│   └── encodeMulticall.ts
│
├── docs/                         # Architecture notes & specs
│   ├── AMM_Math.md
│   ├── UpgradeStrategy.md
│   └── SecurityReview.md
│
├── .github/
│   ├── workflows/
│   │   └── ci.yml               # Lint + test on push
│   └── ISSUE_TEMPLATE.md
│
├── foundry.toml                  # Foundry config
├── hardhat.config.ts             # (optional) Hardhat config
├── package.json                  # npm scripts for tooling
├── README.md
└── LICENSE




// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Script.sol";
import {Factory} from "../src/core/Factory.sol";
import {PoolDeployer} from "../src/core/PoolDeployer.sol";
import {ProtocolFee} from "../src/governance/ProtocolFee.sol";
import {SwapRouter} from "../src/periphery/SwapRouter.sol";
import {NonfungiblePositionManager} from "../src/periphery/NonfungiblePositionManager.sol";
import {WrappedNative} from "../src/mock/WrappedNative.sol";

contract DeploySupaSwap is Script {
    function run() external {
        address deployer = msg.sender;

        vm.startBroadcast();

        // Deploy core governance
        ProtocolFee protocolFee = new ProtocolFee(deployer);

        // Deploy PoolDeployer and Factory
        PoolDeployer poolDeployer = new PoolDeployer();
        Factory factory = new Factory(address(poolDeployer), address(protocolFee));

        // Set factory in pool deployer
        poolDeployer.setFactory(address(factory));

        // Deploy wrapped native token (e.g., WETH or WMONAD)
        WrappedNative wrappedNative = new WrappedNative();

        // Deploy Router
        SwapRouter router = new SwapRouter(address(factory), address(wrappedNative));

        // Deploy Position Manager
        NonfungiblePositionManager nftManager = new NonfungiblePositionManager(
            address(factory),
            address(wrappedNative)
        );

        vm.stopBroadcast();

        console.log("📦 Protocol Deployment Complete");
        console.log("Factory:", address(factory));
        console.log("PoolDeployer:", address(poolDeployer));
        console.log("ProtocolFee:", address(protocolFee));
        console.log("SwapRouter:", address(router));
        console.log("PositionManager (NFT):", address(nftManager));
        console.log("WrappedNative:", address(wrappedNative));
    }
}
